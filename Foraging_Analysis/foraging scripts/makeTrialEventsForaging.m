function MakeTrialEventsForaging(Directory, subj_str, outdir)
%assumes trial start timestamp has already been adjusted into recording
%frame. 
%input: Loads "TrialEvents.mat" generated by MakeTrialEventsNP()

%output: saves  TrialEventsAll.mat --> same as TrialEvents.mat but with 
%new fields calculated

% Create additional fields in the Trial Event structure
fprintf('\n=== Starting makeTrialEventsForaging ===\n');
fprintf('Input Directory: %s\n', Directory);
fprintf('Subject string: %s\n', subj_str);
fprintf('Output directory: %s\n', outdir);

disp('Loading data from file...')
try
    TE=load(Directory);
    fprintf('Successfully loaded data from: %s\n', Directory);
catch e
    fprintf('Error loading file: %s\n', e.message);
    rethrow(e);
end

%we keep a copy of the old file
try
    fprintf('Attempting to access SessionData field...\n');
    TEbis = TE.SessionData;
    fprintf('Successfully accessed SessionData field\n');
catch
    fprintf('SessionData field not found, trying direct access...\n');
    TEbis = SessionData;
    fprintf('Successfully accessed data directly\n');
end

fprintf('Number of trials: %d\n', TEbis.nTrials);
nTrials = TEbis.nTrials; %- 1;
fprintf('Processing %d trials\n', nTrials);

TEbis.LeftAmount = TEbis.LeftAmount(1:nTrials);
TEbis.RightAmount = TEbis.RightAmount(1:nTrials);
TEbis.TrialStartTimestamp = TEbis.TrialStartTimestamp(1:nTrials);
TEbis.TrialTypes = TEbis.TrialTypes(1:nTrials);
nTrials = nTrials - 1;

TE_save = TEbis;
fprintf('Removing unnecessary fields...\n');

% List of fields to remove
fields_to_remove = {'RawEvents', 'NidaqData', 'Nidaq2Data', 'RawData', 'Settings', ...
    'LeftValveTime', 'RightValveTime', 'TrialSettings', 'changebridge', ...
    'subject', 'delays', 'bridgepos', 'nTrials', 'suprise', 'extraITI'};

for field = fields_to_remove
    if isfield(TE_save, field{1})
        fprintf('Removing field: %s\n', field{1});
        TE_save = rmfield(TE_save, field{1});
    else
        fprintf('Field not found (skipping): %s\n', field{1});
    end
end

fprintf('Creating output directory if it doesn''t exist...\n');
[status, msg, msgID] = mkdir(outdir);
if status
    fprintf('Output directory created or already exists\n');
else
    fprintf('Warning: Could not create output directory: %s\n', msg);
end

output_file = fullfile(outdir, subj_str + "_RecBehav.mat");
fprintf('Saving to: %s\n', output_file);
try
    save(output_file, '-struct', 'TE_save');
    fprintf('Successfully saved RecBehav file\n');
catch e
    fprintf('Error saving file: %s\n', e.message);
    rethrow(e);
end

fprintf('=== Completed makeTrialEventsForaging ===\n\n');